#pragma version 10
#pragma typetrack false

// contract_2.DecentralizedAiContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "governor" "token" "query_fee" "next_query_id" "Q" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // contract_2.py:16
    // self.governor = Account()              # contract governor (manages config + opt-in)
    bytec_0 // "governor"
    global ZeroAddress
    app_global_put
    // contract_2.py:17
    // self.token = Asset(0)                  # ASA used for payments (DAISY token)
    bytec_1 // "token"
    intc_0 // 0
    app_global_put
    // contract_2.py:18
    // self.query_fee = UInt64(0)             # fee required to post a query
    bytec_2 // "query_fee"
    intc_0 // 0
    app_global_put
    // contract_2.py:19
    // self.next_query_id = UInt64(1)         # incremental query counter
    bytec_3 // "next_query_id"
    intc_1 // 1
    app_global_put

main_after_if_else@2:
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@13
    pushbytess 0x6eb260b3 0x08a956f7 0xfc4b88b7 0x3e2f2e38 0x1050b450 0xcf5bd9c5 0x3c30605b 0x215d4563 // method "create(asset,uint64)void", method "set_governor(account)void", method "set_fee(uint64)void", method "opt_in_to_token()void", method "withdraw_asset(uint64)void", method "post_query(string,axfer)uint64", method "submit_response(uint64,string)void", method "read_prompt(uint64)string"
    txna ApplicationArgs 0
    match main_create_route@5 main_set_governor_route@6 main_set_fee_route@7 main_opt_in_to_token_route@8 main_withdraw_asset_route@9 main_post_query_route@10 main_submit_response_route@11 main_read_prompt_route@12

main_after_if_else@13:
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    intc_0 // 0
    return

main_read_prompt_route@12:
    // contract_2.py:107-108
    // # Read-only method: returns the prompt for a given query id (for providers to fetch)
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // contract_2.py:107-108
    // # Read-only method: returns the prompt for a given query id (for providers to fetch)
    // @arc4.abimethod(readonly=True)
    callsub read_prompt
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_submit_response_route@11:
    // contract_2.py:87-89
    // # Provider submits a response and gets rewarded in DAISY
    // # Reads (guards on) the prompt box and deletes it immediately to reclaim MBR
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // contract_2.py:87-89
    // # Provider submits a response and gets rewarded in DAISY
    // # Reads (guards on) the prompt box and deletes it immediately to reclaim MBR
    // @arc4.abimethod
    callsub submit_response
    intc_1 // 1
    return

main_post_query_route@10:
    // contract_2.py:69-71
    // # User posts a query with a DAISY token payment
    // # Stores the prompt in a per-query box; this box is deleted upon response
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // contract_2.py:69-71
    // # User posts a query with a DAISY token payment
    // # Stores the prompt in a per-query box; this box is deleted upon response
    // @arc4.abimethod
    callsub post_query
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_withdraw_asset_route@9:
    // contract_2.py:58-59
    // # Governor can withdraw DAISY tokens from contract
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // contract_2.py:58-59
    // # Governor can withdraw DAISY tokens from contract
    // @arc4.abimethod
    callsub withdraw_asset
    intc_1 // 1
    return

main_opt_in_to_token_route@8:
    // contract_2.py:44-45
    // # Governor opts the contract into the DAISY token ASA
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub opt_in_to_token
    intc_1 // 1
    return

main_set_fee_route@7:
    // contract_2.py:38-39
    // # Governor can change fee
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // contract_2.py:38-39
    // # Governor can change fee
    // @arc4.abimethod
    callsub set_fee
    intc_1 // 1
    return

main_set_governor_route@6:
    // contract_2.py:32-33
    // # Governor can change governor
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // contract_2.py:32-33
    // # Governor can change governor
    // @arc4.abimethod
    callsub set_governor
    intc_1 // 1
    return

main_create_route@5:
    // contract_2.py:24-25
    // # Initialize contract with DAISY token ASA ID + posting fee
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // contract_2.py:14
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // contract_2.py:24-25
    // # Initialize contract with DAISY token ASA ID + posting fee
    // @arc4.abimethod(create="require")
    callsub create
    intc_1 // 1
    return


// contract_2.DecentralizedAiContract.create(token_id: uint64, fee: uint64) -> void:
create:
    // contract_2.py:24-26
    // # Initialize contract with DAISY token ASA ID + posting fee
    // @arc4.abimethod(create="require")
    // def create(self, token_id: Asset, fee: UInt64) -> None:
    proto 2 0
    // contract_2.py:27
    // self.governor = Txn.sender
    bytec_0 // "governor"
    txn Sender
    app_global_put
    // contract_2.py:28
    // self.token = token_id
    bytec_1 // "token"
    frame_dig -2
    app_global_put
    // contract_2.py:29
    // self.query_fee = fee
    bytec_2 // "query_fee"
    frame_dig -1
    app_global_put
    // contract_2.py:30
    // self.next_query_id = UInt64(1)
    bytec_3 // "next_query_id"
    intc_1 // 1
    app_global_put
    retsub


// contract_2.DecentralizedAiContract.set_governor(new_governor: bytes) -> void:
set_governor:
    // contract_2.py:32-34
    // # Governor can change governor
    // @arc4.abimethod
    // def set_governor(self, new_governor: Account) -> None:
    proto 1 0
    // contract_2.py:35
    // assert Txn.sender == self.governor, "Only governor can change governor"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only governor can change governor
    // contract_2.py:36
    // self.governor = new_governor
    bytec_0 // "governor"
    frame_dig -1
    app_global_put
    retsub


// contract_2.DecentralizedAiContract.set_fee(new_fee: uint64) -> void:
set_fee:
    // contract_2.py:38-40
    // # Governor can change fee
    // @arc4.abimethod
    // def set_fee(self, new_fee: UInt64) -> None:
    proto 1 0
    // contract_2.py:41
    // assert Txn.sender == self.governor, "Only governor can set fee"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only governor can set fee
    // contract_2.py:42
    // self.query_fee = new_fee
    bytec_2 // "query_fee"
    frame_dig -1
    app_global_put
    retsub


// contract_2.DecentralizedAiContract.opt_in_to_token() -> void:
opt_in_to_token:
    // contract_2.py:51
    // assert Txn.sender == self.governor, "Only governor can opt-in"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only governor can opt-in
    // contract_2.py:52-56
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=UInt64(0),                          # opt-in requires 0 transfer
    //     asset_receiver=Global.current_application_address,
    // ).submit()
    itxn_begin
    // contract_2.py:53
    // xfer_asset=self.token,
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    // contract_2.py:55
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    // contract_2.py:54
    // asset_amount=UInt64(0),                          # opt-in requires 0 transfer
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    // contract_2.py:52
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contract_2.py:52-56
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=UInt64(0),                          # opt-in requires 0 transfer
    //     asset_receiver=Global.current_application_address,
    // ).submit()
    itxn_submit
    retsub


// contract_2.DecentralizedAiContract.withdraw_asset(amount: uint64) -> void:
withdraw_asset:
    // contract_2.py:58-60
    // # Governor can withdraw DAISY tokens from contract
    // @arc4.abimethod
    // def withdraw_asset(self, amount: UInt64) -> None:
    proto 1 0
    // contract_2.py:61
    // assert Txn.sender == self.governor, "Only governor can withdraw"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    swap
    dig 1
    ==
    assert // Only governor can withdraw
    // contract_2.py:62-67
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=amount,
    //     asset_receiver=self.governor,
    //     fee=0,
    // ).submit()
    itxn_begin
    // contract_2.py:63
    // xfer_asset=self.token,
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    swap
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field AssetAmount
    itxn_field XferAsset
    // contract_2.py:62
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // contract_2.py:66
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // contract_2.py:62-67
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=amount,
    //     asset_receiver=self.governor,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// contract_2.DecentralizedAiContract.post_query(query_text: bytes, payment: uint64) -> uint64:
post_query:
    // contract_2.py:69-72
    // # User posts a query with a DAISY token payment
    // # Stores the prompt in a per-query box; this box is deleted upon response
    // @arc4.abimethod
    // def post_query(self, query_text: arc4.String, payment: gtxn.AssetTransferTransaction) -> UInt64:
    proto 2 1
    // contract_2.py:73-74
    // # Validate payment
    // assert payment.xfer_asset == self.token, "Wrong token"
    frame_dig -1
    gtxns XferAsset
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    ==
    assert // Wrong token
    // contract_2.py:75
    // assert payment.asset_receiver == Global.current_application_address, "Payment must go to contract"
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // Payment must go to contract
    // contract_2.py:76
    // assert payment.asset_amount == self.query_fee, "Wrong fee amount"
    frame_dig -1
    gtxns AssetAmount
    intc_0 // 0
    bytec_2 // "query_fee"
    app_global_get_ex
    assert // check self.query_fee exists
    ==
    assert // Wrong fee amount
    // contract_2.py:77
    // assert payment.sender == Txn.sender, "Payment must be from caller"
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Payment must be from caller
    // contract_2.py:79
    // qid = self.next_query_id
    intc_0 // 0
    bytec_3 // "next_query_id"
    app_global_get_ex
    assert // check self.next_query_id exists
    // contract_2.py:80
    // self.next_query_id += UInt64(1)
    dup
    intc_1 // 1
    +
    bytec_3 // "next_query_id"
    swap
    app_global_put
    // contract_2.py:82-83
    // # Store prompt in a per-query box (ephemeral)
    // self.queries[qid] = query_text
    dup
    itob
    bytec 4 // "Q"
    swap
    concat
    dup
    box_del
    pop
    frame_dig -2
    box_put
    // contract_2.py:85
    // return qid
    retsub


// contract_2.DecentralizedAiContract.submit_response(query_id: uint64, response_ref: bytes) -> void:
submit_response:
    // contract_2.py:87-90
    // # Provider submits a response and gets rewarded in DAISY
    // # Reads (guards on) the prompt box and deletes it immediately to reclaim MBR
    // @arc4.abimethod
    // def submit_response(self, query_id: UInt64, response_ref: arc4.String) -> None:
    proto 2 0
    // contract_2.py:91-92
    // # Guard: ensure the prompt box exists; will fail if missing (prevents double/invalid responses)
    // _prompt = self.queries[query_id]
    frame_dig -2
    itob
    bytec 4 // "Q"
    swap
    concat
    dup
    box_get
    bury 1
    assert // check self.queries entry exists
    // contract_2.py:94-100
    // # Pay provider in DAISY (inner xfer). The outer call should cover inner fees.
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=self.query_fee,
    //     asset_receiver=Txn.sender,
    //     fee=0,
    // ).submit()
    itxn_begin
    // contract_2.py:96
    // xfer_asset=self.token,
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    // contract_2.py:97
    // asset_amount=self.query_fee,
    intc_0 // 0
    bytec_2 // "query_fee"
    app_global_get_ex
    assert // check self.query_fee exists
    // contract_2.py:98
    // asset_receiver=Txn.sender,
    txn Sender
    itxn_field AssetReceiver
    itxn_field AssetAmount
    itxn_field XferAsset
    // contract_2.py:94-95
    // # Pay provider in DAISY (inner xfer). The outer call should cover inner fees.
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // contract_2.py:99
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // contract_2.py:94-100
    // # Pay provider in DAISY (inner xfer). The outer call should cover inner fees.
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=self.query_fee,
    //     asset_receiver=Txn.sender,
    //     fee=0,
    // ).submit()
    itxn_submit
    // contract_2.py:102-103
    // # Delete the per-query prompt box to immediately reclaim MBR
    // del self.queries[query_id]
    box_del
    pop
    retsub


// contract_2.DecentralizedAiContract.read_prompt(query_id: uint64) -> bytes:
read_prompt:
    // contract_2.py:107-109
    // # Read-only method: returns the prompt for a given query id (for providers to fetch)
    // @arc4.abimethod(readonly=True)
    // def read_prompt(self, query_id: UInt64) -> arc4.String:
    proto 1 1
    // contract_2.py:110
    // return self.queries[query_id]
    frame_dig -1
    itob
    bytec 4 // "Q"
    swap
    concat
    box_get
    assert // check self.queries entry exists
    retsub