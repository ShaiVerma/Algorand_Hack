#pragma version 10
#pragma typetrack false

// contract.DecentralizedAiContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 4 544
    bytecblock "governor" "token" "query_fee" "next_query_id" 0x00 "Q" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // DaiZ-contracts/contract.py:26
    // self.governor = Account()              # contract governor (manages config + opt-in)
    bytec_0 // "governor"
    global ZeroAddress
    app_global_put
    // DaiZ-contracts/contract.py:27
    // self.token = Asset(0)                  # ASA used for payments (DAISY token)
    bytec_1 // "token"
    intc_0 // 0
    app_global_put
    // DaiZ-contracts/contract.py:28
    // self.query_fee = UInt64(0)             # fee required to post a query
    bytec_2 // "query_fee"
    intc_0 // 0
    app_global_put
    // DaiZ-contracts/contract.py:29
    // self.next_query_id = UInt64(1)         # incremental query counter
    bytec_3 // "next_query_id"
    intc_1 // 1
    app_global_put

main_after_if_else@2:
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@13
    pushbytess 0x6eb260b3 0x08a956f7 0xfc4b88b7 0x3e2f2e38 0x1050b450 0xcf5bd9c5 0x3c30605b 0x419d7ec5 // method "create(asset,uint64)void", method "set_governor(account)void", method "set_fee(uint64)void", method "opt_in_to_token()void", method "withdraw_asset(uint64)void", method "post_query(string,axfer)uint64", method "submit_response(uint64,string)void", method "get_query(uint64)(address,string,address,string,bool)"
    txna ApplicationArgs 0
    match main_create_route@5 main_set_governor_route@6 main_set_fee_route@7 main_opt_in_to_token_route@8 main_withdraw_asset_route@9 main_post_query_route@10 main_submit_response_route@11 main_get_query_route@12

main_after_if_else@13:
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    intc_0 // 0
    return

main_get_query_route@12:
    // DaiZ-contracts/contract.py:120-121
    // # Read-only method: returns a query by ID
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // DaiZ-contracts/contract.py:120-121
    // # Read-only method: returns a query by ID
    // @arc4.abimethod(readonly=True)
    callsub get_query
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_submit_response_route@11:
    // DaiZ-contracts/contract.py:101-102
    // # Provider submits a response and gets rewarded in DAISY
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // DaiZ-contracts/contract.py:101-102
    // # Provider submits a response and gets rewarded in DAISY
    // @arc4.abimethod
    callsub submit_response
    intc_1 // 1
    return

main_post_query_route@10:
    // DaiZ-contracts/contract.py:77-78
    // # User posts a query with a DAISY token payment
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // DaiZ-contracts/contract.py:77-78
    // # User posts a query with a DAISY token payment
    // @arc4.abimethod
    callsub post_query
    itob
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_withdraw_asset_route@9:
    // DaiZ-contracts/contract.py:66-67
    // # Governor can withdraw DAISY tokens from contract
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // DaiZ-contracts/contract.py:66-67
    // # Governor can withdraw DAISY tokens from contract
    // @arc4.abimethod
    callsub withdraw_asset
    intc_1 // 1
    return

main_opt_in_to_token_route@8:
    // DaiZ-contracts/contract.py:52-53
    // # Governor opts the contract into the DAISY token ASA
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub opt_in_to_token
    intc_1 // 1
    return

main_set_fee_route@7:
    // DaiZ-contracts/contract.py:46-47
    // # Governor can change fee
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // DaiZ-contracts/contract.py:46-47
    // # Governor can change fee
    // @arc4.abimethod
    callsub set_fee
    intc_1 // 1
    return

main_set_governor_route@6:
    // DaiZ-contracts/contract.py:40-41
    // # Governor can change governor
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // DaiZ-contracts/contract.py:40-41
    // # Governor can change governor
    // @arc4.abimethod
    callsub set_governor
    intc_1 // 1
    return

main_create_route@5:
    // DaiZ-contracts/contract.py:32-33
    // # Initialize contract with DAISY token ASA ID + posting fee
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // DaiZ-contracts/contract.py:24
    // class DecentralizedAiContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // DaiZ-contracts/contract.py:32-33
    // # Initialize contract with DAISY token ASA ID + posting fee
    // @arc4.abimethod(create="require")
    callsub create
    intc_1 // 1
    return


// contract.DecentralizedAiContract.create(token_id: uint64, fee: uint64) -> void:
create:
    // DaiZ-contracts/contract.py:32-34
    // # Initialize contract with DAISY token ASA ID + posting fee
    // @arc4.abimethod(create="require")
    // def create(self, token_id: Asset, fee: UInt64) -> None:
    proto 2 0
    // DaiZ-contracts/contract.py:35
    // self.governor = Txn.sender
    bytec_0 // "governor"
    txn Sender
    app_global_put
    // DaiZ-contracts/contract.py:36
    // self.token = token_id
    bytec_1 // "token"
    frame_dig -2
    app_global_put
    // DaiZ-contracts/contract.py:37
    // self.query_fee = fee
    bytec_2 // "query_fee"
    frame_dig -1
    app_global_put
    // DaiZ-contracts/contract.py:38
    // self.next_query_id = UInt64(1)
    bytec_3 // "next_query_id"
    intc_1 // 1
    app_global_put
    retsub


// contract.DecentralizedAiContract.set_governor(new_governor: bytes) -> void:
set_governor:
    // DaiZ-contracts/contract.py:40-42
    // # Governor can change governor
    // @arc4.abimethod
    // def set_governor(self, new_governor: Account) -> None:
    proto 1 0
    // DaiZ-contracts/contract.py:43
    // assert Txn.sender == self.governor, "Only governor can change governor"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only governor can change governor
    // DaiZ-contracts/contract.py:44
    // self.governor = new_governor
    bytec_0 // "governor"
    frame_dig -1
    app_global_put
    retsub


// contract.DecentralizedAiContract.set_fee(new_fee: uint64) -> void:
set_fee:
    // DaiZ-contracts/contract.py:46-48
    // # Governor can change fee
    // @arc4.abimethod
    // def set_fee(self, new_fee: UInt64) -> None:
    proto 1 0
    // DaiZ-contracts/contract.py:49
    // assert Txn.sender == self.governor, "Only governor can set fee"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only governor can set fee
    // DaiZ-contracts/contract.py:50
    // self.query_fee = new_fee
    bytec_2 // "query_fee"
    frame_dig -1
    app_global_put
    retsub


// contract.DecentralizedAiContract.opt_in_to_token() -> void:
opt_in_to_token:
    // DaiZ-contracts/contract.py:59
    // assert Txn.sender == self.governor, "Only governor can opt-in"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only governor can opt-in
    // DaiZ-contracts/contract.py:60-64
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=UInt64(0),                          # opt-in requires 0 transfer
    //     asset_receiver=Global.current_application_address,
    // ).submit()
    itxn_begin
    // DaiZ-contracts/contract.py:61
    // xfer_asset=self.token,
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    // DaiZ-contracts/contract.py:63
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    // DaiZ-contracts/contract.py:62
    // asset_amount=UInt64(0),                          # opt-in requires 0 transfer
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    // DaiZ-contracts/contract.py:60
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // DaiZ-contracts/contract.py:60-64
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=UInt64(0),                          # opt-in requires 0 transfer
    //     asset_receiver=Global.current_application_address,
    // ).submit()
    itxn_submit
    retsub


// contract.DecentralizedAiContract.withdraw_asset(amount: uint64) -> void:
withdraw_asset:
    // DaiZ-contracts/contract.py:66-68
    // # Governor can withdraw DAISY tokens from contract
    // @arc4.abimethod
    // def withdraw_asset(self, amount: UInt64) -> None:
    proto 1 0
    // DaiZ-contracts/contract.py:69
    // assert Txn.sender == self.governor, "Only governor can withdraw"
    txn Sender
    intc_0 // 0
    bytec_0 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    swap
    dig 1
    ==
    assert // Only governor can withdraw
    // DaiZ-contracts/contract.py:70-75
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=amount,
    //     asset_receiver=self.governor,
    //     fee=0,
    // ).submit()
    itxn_begin
    // DaiZ-contracts/contract.py:71
    // xfer_asset=self.token,
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    swap
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field AssetAmount
    itxn_field XferAsset
    // DaiZ-contracts/contract.py:70
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // DaiZ-contracts/contract.py:74
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // DaiZ-contracts/contract.py:70-75
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=amount,
    //     asset_receiver=self.governor,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// contract.DecentralizedAiContract.post_query(query_text: bytes, payment: uint64) -> uint64:
post_query:
    // DaiZ-contracts/contract.py:77-79
    // # User posts a query with a DAISY token payment
    // @arc4.abimethod
    // def post_query(self, query_text: arc4.String, payment: gtxn.AssetTransferTransaction) -> UInt64:
    proto 2 1
    // DaiZ-contracts/contract.py:80-81
    // # Validate payment
    // assert payment.xfer_asset == self.token, "Wrong token"
    frame_dig -1
    gtxns XferAsset
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    ==
    assert // Wrong token
    // DaiZ-contracts/contract.py:82
    // assert payment.asset_receiver == Global.current_application_address, "Payment must go to contract"
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // Payment must go to contract
    // DaiZ-contracts/contract.py:83
    // assert payment.asset_amount == self.query_fee, "Wrong fee amount"
    frame_dig -1
    gtxns AssetAmount
    intc_0 // 0
    bytec_2 // "query_fee"
    app_global_get_ex
    assert // check self.query_fee exists
    ==
    assert // Wrong fee amount
    // DaiZ-contracts/contract.py:84
    // assert payment.sender == Txn.sender, "Payment must be from caller"
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // Payment must be from caller
    // DaiZ-contracts/contract.py:86
    // query_id = self.next_query_id
    intc_0 // 0
    bytec_3 // "next_query_id"
    app_global_get_ex
    assert // check self.next_query_id exists
    // DaiZ-contracts/contract.py:91
    // provider=arc4.Address(Global.zero_address),
    global ZeroAddress
    // DaiZ-contracts/contract.py:89
    // submitter=arc4.Address(Txn.sender.bytes),
    txn Sender
    // DaiZ-contracts/contract.py:88-94
    // new_query = Query(
    //     submitter=arc4.Address(Txn.sender.bytes),
    //     query_text=query_text,
    //     provider=arc4.Address(Global.zero_address),
    //     response_text=arc4.String(""),
    //     is_answered=arc4.Bool(False),
    // )
    pushbytes 0x0045
    concat
    frame_dig -2
    len
    pushint 69 // 69
    +
    swap
    uncover 2
    concat
    swap
    itob
    extract 6 2
    concat
    // DaiZ-contracts/contract.py:93
    // is_answered=arc4.Bool(False),
    bytec 4 // 0x00
    // DaiZ-contracts/contract.py:88-94
    // new_query = Query(
    //     submitter=arc4.Address(Txn.sender.bytes),
    //     query_text=query_text,
    //     provider=arc4.Address(Global.zero_address),
    //     response_text=arc4.String(""),
    //     is_answered=arc4.Bool(False),
    // )
    concat
    frame_dig -2
    concat
    // DaiZ-contracts/contract.py:92
    // response_text=arc4.String(""),
    pushbytes 0x0000
    // DaiZ-contracts/contract.py:88-94
    // new_query = Query(
    //     submitter=arc4.Address(Txn.sender.bytes),
    //     query_text=query_text,
    //     provider=arc4.Address(Global.zero_address),
    //     response_text=arc4.String(""),
    //     is_answered=arc4.Bool(False),
    // )
    concat
    // DaiZ-contracts/contract.py:96
    // self.queries[query_id] = new_query.copy()
    dig 1
    itob
    bytec 5 // "Q"
    swap
    concat
    dup
    box_del
    pop
    swap
    box_put
    // DaiZ-contracts/contract.py:97
    // self.next_query_id += UInt64(1)
    dup
    intc_1 // 1
    +
    bytec_3 // "next_query_id"
    swap
    app_global_put
    // DaiZ-contracts/contract.py:99
    // return query_id
    retsub


// contract.DecentralizedAiContract.submit_response(query_id: uint64, response_text: bytes) -> void:
submit_response:
    // DaiZ-contracts/contract.py:101-103
    // # Provider submits a response and gets rewarded in DAISY
    // @arc4.abimethod
    // def submit_response(self, query_id: UInt64, response_text: arc4.String) -> None:
    proto 2 0
    // DaiZ-contracts/contract.py:104
    // query = self.queries[query_id].copy()
    frame_dig -2
    itob
    bytec 5 // "Q"
    swap
    concat
    dup
    box_get
    assert // check self.queries entry exists
    // DaiZ-contracts/contract.py:105
    // assert query.is_answered == arc4.Bool(False), "Already answered"
    dup
    intc_3 // 544
    getbit
    bytec 4 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 4 // 0x00
    ==
    assert // Already answered
    // DaiZ-contracts/contract.py:107
    // query.provider = arc4.Address(Txn.sender.bytes)
    txn Sender
    replace2 34
    // DaiZ-contracts/contract.py:108
    // query.response_text = response_text
    dup
    pushint 66 // 66
    extract_uint16
    intc_0 // 0
    swap
    extract3
    frame_dig -1
    concat
    // DaiZ-contracts/contract.py:109
    // query.is_answered = arc4.Bool(True)
    intc_3 // 544
    intc_1 // 1
    setbit
    // DaiZ-contracts/contract.py:110
    // self.queries[query_id] = query.copy()
    dig 1
    box_del
    pop
    box_put
    // DaiZ-contracts/contract.py:112-118
    // # Pay provider in DAISY
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=self.query_fee,
    //     asset_receiver=Txn.sender,
    //     fee=0,
    // ).submit()
    itxn_begin
    // DaiZ-contracts/contract.py:114
    // xfer_asset=self.token,
    intc_0 // 0
    bytec_1 // "token"
    app_global_get_ex
    assert // check self.token exists
    // DaiZ-contracts/contract.py:115
    // asset_amount=self.query_fee,
    intc_0 // 0
    bytec_2 // "query_fee"
    app_global_get_ex
    assert // check self.query_fee exists
    // DaiZ-contracts/contract.py:116
    // asset_receiver=Txn.sender,
    txn Sender
    itxn_field AssetReceiver
    itxn_field AssetAmount
    itxn_field XferAsset
    // DaiZ-contracts/contract.py:112-113
    // # Pay provider in DAISY
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // DaiZ-contracts/contract.py:117
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // DaiZ-contracts/contract.py:112-118
    // # Pay provider in DAISY
    // itxn.AssetTransfer(
    //     xfer_asset=self.token,
    //     asset_amount=self.query_fee,
    //     asset_receiver=Txn.sender,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// contract.DecentralizedAiContract.get_query(query_id: uint64) -> bytes:
get_query:
    // DaiZ-contracts/contract.py:120-122
    // # Read-only method: returns a query by ID
    // @arc4.abimethod(readonly=True)
    // def get_query(self, query_id: UInt64) -> Query:
    proto 1 1
    // DaiZ-contracts/contract.py:123
    // return self.queries[query_id]
    frame_dig -1
    itob
    bytec 5 // "Q"
    swap
    concat
    box_get
    assert // check self.queries entry exists
    retsub
