{
    "name": "DecentralizedAiContract",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "asset",
                    "name": "token_id"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_governor",
            "args": [
                {
                    "type": "account",
                    "name": "new_governor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_fee",
            "args": [
                {
                    "type": "uint64",
                    "name": "new_fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in_to_token",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opts the contract into the DAISY ASA token.\nRequired before the contract can receive/transfer DAISY.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "post_query",
            "args": [
                {
                    "type": "string",
                    "name": "query_text"
                },
                {
                    "type": "axfer",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "submit_response",
            "args": [
                {
                    "type": "uint64",
                    "name": "query_id"
                },
                {
                    "type": "string",
                    "name": "response_ref"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_prompt",
            "args": [
                {
                    "type": "uint64",
                    "name": "query_id"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "governor": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Z292ZXJub3I="
                },
                "token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG9rZW4="
                },
                "query_fee": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cXVlcnlfZmVl"
                },
                "next_query_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9xdWVyeV9pZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "queries": {
                    "keyType": "uint64",
                    "valueType": "string",
                    "prefix": "UQ=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        145,
                        166,
                        185,
                        216,
                        232,
                        244,
                        260,
                        278
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        327
                    ],
                    "errorMessage": "Only governor can change governor"
                },
                {
                    "pc": [
                        356
                    ],
                    "errorMessage": "Only governor can opt-in"
                },
                {
                    "pc": [
                        343
                    ],
                    "errorMessage": "Only governor can set fee"
                },
                {
                    "pc": [
                        392
                    ],
                    "errorMessage": "Only governor can withdraw"
                },
                {
                    "pc": [
                        453
                    ],
                    "errorMessage": "Payment must be from caller"
                },
                {
                    "pc": [
                        435
                    ],
                    "errorMessage": "Payment must go to contract"
                },
                {
                    "pc": [
                        445
                    ],
                    "errorMessage": "Wrong fee amount"
                },
                {
                    "pc": [
                        427
                    ],
                    "errorMessage": "Wrong token"
                },
                {
                    "pc": [
                        282
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        148,
                        169,
                        188,
                        219,
                        235,
                        247,
                        263
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        325,
                        341,
                        354,
                        387
                    ],
                    "errorMessage": "check self.governor exists"
                },
                {
                    "pc": [
                        457
                    ],
                    "errorMessage": "check self.next_query_id exists"
                },
                {
                    "pc": [
                        491,
                        530
                    ],
                    "errorMessage": "check self.queries entry exists"
                },
                {
                    "pc": [
                        443,
                        500
                    ],
                    "errorMessage": "check self.query_fee exists"
                },
                {
                    "pc": [
                        361,
                        397,
                        425,
                        496
                    ],
                    "errorMessage": "check self.token exists"
                },
                {
                    "pc": [
                        201
                    ],
                    "errorMessage": "transaction type is axfer"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEEJgYIZ292ZXJub3IFdG9rZW4JcXVlcnlfZmVlDW5leHRfcXVlcnlfaWQBUQQVH3x1MRhAAA0oMgNnKSJnKiJnKyNnMRtBAD+CCARusmCzBAipVvcE/EuItwQ+Ly44BBBQtFAEz1vZxQQ8MGBbBCFdRWM2GgCOCACHAHUAZQBZAEkAKgAXAAIiQzEZFEQxGEQ2GgEXiAFrJwVMULAjQzEZFEQxGEQ2GgEXNhoCiAEpI0MxGRREMRhENhoBMRYjCUk4ECQSRIgA0hYnBUxQsCNDMRkURDEYRDYaAReIAJgjQzEZFEQxGESIAG4jQzEZFEQxGEQ2GgEXiABOI0MxGRREMRhENhoBF8AciAAsI0MxGRREMRgURDYaARfAMDYaAheIAAIjQ4oCACgxAGcpi/5nKov/ZysjZ4mKAQAxACIoZUQSRCiL/2eJigEAMQAiKGVEEkQqi/9niTEAIihlRBJEsSIpZUQyCrIUIrISshEkshAisgGziYoBADEAIihlRExLARJEsSIpZURMshSL/7ISshEkshAisgGziYoCAYv/OBEiKWVEEkSL/zgUMgoSRIv/OBIiKmVEEkSL/zgAMQASRCIrZURJIwgrTGdJFicETFBJvEiL/r+JigIAi/4WJwRMUEm+RQFEsSIpZUQiKmVEMQCyFLISshEkshAisgGzvEiJigEBi/8WJwRMUL5EiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}