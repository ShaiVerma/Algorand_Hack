{
    "hints": {
        "create(asset,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_governor(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_fee(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "opt_in_to_token()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_asset(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "post_query(string,axfer)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_response(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_query(uint64)(address,string,address,string,bool)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Query",
                    "elements": [
                        [
                            "submitter",
                            "address"
                        ],
                        [
                            "query_text",
                            "string"
                        ],
                        [
                            "provider",
                            "address"
                        ],
                        [
                            "response_text",
                            "string"
                        ],
                        [
                            "is_answered",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "governor": {
                    "type": "bytes",
                    "key": "governor"
                },
                "next_query_id": {
                    "type": "uint64",
                    "key": "next_query_id"
                },
                "query_fee": {
                    "type": "uint64",
                    "key": "query_fee"
                },
                "token": {
                    "type": "uint64",
                    "key": "token"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DecentralizedAiContract",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "asset",
                        "name": "token_id"
                    },
                    {
                        "type": "uint64",
                        "name": "fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_governor",
                "args": [
                    {
                        "type": "account",
                        "name": "new_governor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_fee",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_in_to_token",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opts the contract into the DAISY ASA token.\nRequired before the contract can receive/transfer DAISY."
            },
            {
                "name": "withdraw_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "post_query",
                "args": [
                    {
                        "type": "string",
                        "name": "query_text"
                    },
                    {
                        "type": "axfer",
                        "name": "payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "submit_response",
                "args": [
                    {
                        "type": "uint64",
                        "name": "query_id"
                    },
                    {
                        "type": "string",
                        "name": "response_text"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_query",
                "args": [
                    {
                        "type": "uint64",
                        "name": "query_id"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(address,string,address,string,bool)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}